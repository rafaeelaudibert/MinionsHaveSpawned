#version 330 core

// Fragment attributes received as input by the Fragment Shader
// This attribute was generated by the rasterizer with
// each vertex color interpolation.
in vec4 position;

uniform float health_percentage;

// The Fragment Shader output is the final fragment color
out vec4 color;

float red_component() {
    if (health_percentage > 0.5) {
        return 0.89 + ((health_percentage - 0.5) * 2 * (0.0 - 0.89));
    } else {
        return 1.0 + health_percentage * 2 * (0.89 - 1.0);
    }
}

float green_component() {
    if (health_percentage > 0.5) {
        return 1.0 + ((health_percentage - 0.5) * 2 * (0.71 - 1.0));
    } else {
        return 0.196 + health_percentage * 2 * (1.0 - 0.196);
    }
}

float blue_component() {
    if (health_percentage > 0.5) {
        return 0.188 + ((health_percentage - 0.5) * 2 * (0.105 - 0.188));
    } else {
        return 0.196 + health_percentage * 2 * (0.188 - 0.196);
    }
}

void main()
{
    if (health_percentage > position.x) {
        color = vec4(red_component(), green_component(), blue_component(), 1.0);
    } else {
        color = vec4(0.7, 0.7, 0.7, 0.8);
    }
}
